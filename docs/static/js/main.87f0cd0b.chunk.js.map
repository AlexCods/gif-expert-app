{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OAC1CN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAkB,EAAjBC,GAAkB,IAAfC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,IAElC,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCLHK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACfN,EADe,iDACmCO,UAAUF,GAD7C,4BAFR,oCAEQ,SAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAaZY,GAbY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECFX,SAACA,GAAc,IAAD,EAEZrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAW,WACPjB,EAAQC,GACHiB,MAAM,SAAAC,GACHH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,IAEIC,EDb2BK,CAAcnB,GAAlCU,EAFqB,EAE3BJ,KAAcO,EAFa,EAEbA,QAEtB,OACI,qCACA,6BAAKb,IAECa,GAAW,wCAEb,qBAAKjB,UAAU,YAAf,SAEQc,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIhB,aEmBtB2B,EAnCM,WAAM,MAGazC,mBAAS,CAAC,cAHvB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAYvB,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEQ2C,EAAWb,KAAK,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEGA,SAAUA,GADLA,Y,MCtBjCsB,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.87f0cd0b.chunk.js","sourcesContent":["import {useState} from 'react';\nimport {PropTypes} from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( (cats) => [ inputValue, ...cats ] );\n            setInputValue('');\n        }\n\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const GifGridItem = ({id,title,url}) =>{\n\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n\n}\n","const apiKey = 'Q491sjYdsQV8MYOOdYdaYAVnZLQGAYep';\n\nexport const getGifs = async ( category ) => {\n    let url =  `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=5&api_key=${apiKey}`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n\n}","import {useState, useEffect} from \"react\";\nimport {GifGridItem} from \"./GifGridItem\";\nimport {getGifs} from \"../helpers/getGifs\";\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\n\n\nexport const GifGrid = ({category}) => {\n\n    const { data: images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n        <h3>{category}</h3>\n\n            { loading && <p>Loading</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n\n        </>)\n\n\n\n}","import {useEffect, useState} from \"react\";\nimport {getGifs} from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category)\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, []);\n\n    return state; // { data:[], loading: true };\n\n}","import {useState} from \"react\";\nimport {AddCategory} from './components/AddCategory';\nimport {GifGrid} from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    //const categories = ['One punch', 'Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['One punch']);\n\n    /*\n    const handleAdd = () => {\n        setCategories( [...categories,'HunterXHunter'] );\n    }\n    */\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={ setCategories }/>\n\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( category =>\n                         <GifGrid\n                            key={category}\n                            category={category} />\n                    )\n                }\n            </ol>\n\n        </>\n    )\n\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);"],"sourceRoot":""}